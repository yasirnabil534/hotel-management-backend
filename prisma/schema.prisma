// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Hotel Hotel[]
  Order Order[]
  Cart     Cart[]
}

model Hotel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  rating    Float    @default(0)
  ownerId   String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner    User       @relation(fields: [ownerId], references: [id])
  services Service[]
  products Product[]
  category Category[]
  systemService SystemService[]
  Order Order[]
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  hotelId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  hotel    Hotel      @relation(fields: [hotelId], references: [id])
  products Product[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  images      String[] @default([])  // Keep as non-optional array with default empty value
  serviceId   String   @db.ObjectId
  hotelId     String   @db.ObjectId
  categoryId  String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  service Service @relation(fields: [serviceId], references: [id])
  hotel   Hotel   @relation(fields: [hotelId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  OrderProduct OrderProduct[]
  CartItem CartItem[]
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  serviceId String   @db.ObjectId
  hotelId   String   @db.ObjectId
  images    String[] @default([])  // Change to non-optional with default empty value
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service SystemService   @relation(fields: [serviceId], references: [id])
  hotel   Hotel     @relation(fields: [hotelId], references: [id])
  product Product[]
}

model ServiceTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String?  // Made optional
  description String?
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  systemService SystemService[]
}

model SystemService {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  image               String?  // Already optional
  description         String?
  link                String?
  hotelId             String   @db.ObjectId
  serviceTemplateId   String   @db.ObjectId
  isActive            Boolean  @default(true)

  hotel               Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  systemService       ServiceTemplate   @relation(fields: [serviceTemplateId], references: [id], onDelete: Cascade)
  Category  Category[]
}

model OrderProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order    Order    @relation(fields: [orderId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  hotelId   String   @db.ObjectId
  status    String   // e.g., 'pending', 'completed', 'cancelled'
  hidden    Boolean  @default(false)
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hotel   Hotel     @relation(fields: [hotelId], references: [id])
  user    User      @relation(fields: [userId], references: [id])
  OrderProduct OrderProduct[]
}


model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  CartItem     CartItem[]
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
